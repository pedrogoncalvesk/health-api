CREATE TABLE SERVICES (
    ID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL UNIQUE,
    DESCRIPTION CLOB NULL
);
COMMIT;

CREATE TABLE USERS (
    ID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
    NAME VARCHAR2(255),
    EMAIL VARCHAR2(255) NOT NULL UNIQUE
COMMIT;

CREATE TABLE DOCTORS (
    ID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
    USER_ID RAW(16) NOT NULL UNIQUE,
    SPECIALTY VARCHAR2(255) NOT NULL,
    CONSTRAINT fk_doctor_user FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);
COMMIT;

CREATE TABLE PATIENTS (
    ID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
    USER_ID RAW(16) NOT NULL UNIQUE,
    HEALTH_CONDITION VARCHAR2(255) NOT NULL,
    CONSTRAINT fk_patient_user FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);
COMMIT;

CREATE TABLE APPOINTMENTS (
    ID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
    DOCTOR_ID RAW(16),
    PATIENT_ID RAW(16),
    SERVICE_ID RAW(16),
    APPOINTMENT_DATE DATETIME,
    STATUS VARCHAR2(50),
    CONSTRAINT fk_appointment_doctor FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(ID),
    CONSTRAINT fk_appointment_patient FOREIGN KEY (PATIENT_ID) REFERENCES PATIENTS(ID),
    CONSTRAINT fk_appointment_service FOREIGN KEY (SERVICE_ID) REFERENCES SERVICES(ID)
);
COMMIT;

CREATE TABLE DOCTOR_SERVICES (
    ID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
    DOCTOR_ID RAW(16),
    SERVICE_ID RAW(16),
    AVAILABILITY_HOURS VARCHAR2(255),
    CONSTRAINT fk_doctor_service_doctor FOREIGN KEY DOCTOR_ID REFERENCES DOCTORS(ID),
    CONSTRAINT fk_doctor_service_service FOREIGN KEY SERVICE_ID REFERENCES SERVICES(ID)
);

-- Rotina que registra agendamento de consulta
CREATE OR REPLACE PROCEDURE NEW_APPOINTMENT ( 
    P_PATIENT_ID IN RAW,
    P_DOCTOR_ID IN RAW,
    P_SERVICE_ID IN RAW,
    P_APPOINTMENT_DATE IN DATETIME,
    P_STATUS IN VARCHAR2
)
BEGIN 
    INSERT INTO APPOINTMENTS (PATIENT_ID, DOCTOR_ID, SERVICE_ID, APPOINTMENT_DATE, STATUS)
    VALUES (P_PATIENT_ID, P_DOCTOR_ID, P_SERVICE_ID, P_APPOINTMENT_DATE, P_STATUS);
    
    DBMS_OUTPUT.PUT_LINE('Consulta registrada com sucesso!'); 
END;
COMMIT; 

-- Rotina que consulta se o paciente tem consultas agendadas
CREATE OR REPLACE PROCEDURE CHECK_APPOINTMENTS_TODAY ( 
 P_PATIENT_ID IN RAW 
) AS RESULT NUMBER;
BEGIN 
    SELECT COUNT(*) INTO RESULT 
    FROM APPOINTMENTS
    WHERE PATIENT_ID = P_PATIENT_ID
      AND TRUNC(APPOINTMENT_DATE) = TRUNC(SYSDATE);  

    IF RESULT > 0 THEN 
        DBMS_OUTPUT.PUT_LINE('Você tem ' || RESULT || ' consulta(s) agendada(s) para hoje.'); 
    ELSE 
        DBMS_OUTPUT.PUT_LINE('Você não tem consultas agendadas para hoje.'); 
    END IF;
END;
COMMIT;

ALTER USER HEALTH_APP quota unlimited on DATA;
COMMIT;
